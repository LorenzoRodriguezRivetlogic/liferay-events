/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.rivetlogic.event.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.rivetlogic.event.model.Participant;
import com.rivetlogic.event.model.ParticipantModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Participant service. Represents a row in the &quot;rivetlogic_event_Participant&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.rivetlogic.event.model.ParticipantModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ParticipantImpl}.
 * </p>
 *
 * @author juancarrillo
 * @see ParticipantImpl
 * @see com.rivetlogic.event.model.Participant
 * @see com.rivetlogic.event.model.ParticipantModel
 * @generated
 */
public class ParticipantModelImpl extends BaseModelImpl<Participant>
	implements ParticipantModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a participant model instance should use the {@link com.rivetlogic.event.model.Participant} interface instead.
	 */
	public static final String TABLE_NAME = "rivetlogic_event_Participant";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "participantId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "eventId", Types.BIGINT },
			{ "fullName", Types.VARCHAR },
			{ "email", Types.VARCHAR },
			{ "phoneNumber", Types.VARCHAR },
			{ "companyName", Types.VARCHAR },
			{ "status", Types.INTEGER }
		};
	public static final String TABLE_SQL_CREATE = "create table rivetlogic_event_Participant (uuid_ VARCHAR(75) null,participantId LONG not null primary key,companyId LONG,groupId LONG,eventId LONG,fullName VARCHAR(75) null,email VARCHAR(75) null,phoneNumber VARCHAR(75) null,companyName VARCHAR(75) null,status INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table rivetlogic_event_Participant";
	public static final String ORDER_BY_JPQL = " ORDER BY participant.fullName ASC";
	public static final String ORDER_BY_SQL = " ORDER BY rivetlogic_event_Participant.fullName ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.rivetlogic.event.model.Participant"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.rivetlogic.event.model.Participant"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.rivetlogic.event.model.Participant"),
			true);
	public static long COMPANYID_COLUMN_BITMASK = 1L;
	public static long EMAIL_COLUMN_BITMASK = 2L;
	public static long EVENTID_COLUMN_BITMASK = 4L;
	public static long GROUPID_COLUMN_BITMASK = 8L;
	public static long UUID_COLUMN_BITMASK = 16L;
	public static long FULLNAME_COLUMN_BITMASK = 32L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.rivetlogic.event.model.Participant"));

	public ParticipantModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _participantId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setParticipantId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _participantId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Participant.class;
	}

	@Override
	public String getModelClassName() {
		return Participant.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("participantId", getParticipantId());
		attributes.put("companyId", getCompanyId());
		attributes.put("groupId", getGroupId());
		attributes.put("eventId", getEventId());
		attributes.put("fullName", getFullName());
		attributes.put("email", getEmail());
		attributes.put("phoneNumber", getPhoneNumber());
		attributes.put("companyName", getCompanyName());
		attributes.put("status", getStatus());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long participantId = (Long)attributes.get("participantId");

		if (participantId != null) {
			setParticipantId(participantId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long eventId = (Long)attributes.get("eventId");

		if (eventId != null) {
			setEventId(eventId);
		}

		String fullName = (String)attributes.get("fullName");

		if (fullName != null) {
			setFullName(fullName);
		}

		String email = (String)attributes.get("email");

		if (email != null) {
			setEmail(email);
		}

		String phoneNumber = (String)attributes.get("phoneNumber");

		if (phoneNumber != null) {
			setPhoneNumber(phoneNumber);
		}

		String companyName = (String)attributes.get("companyName");

		if (companyName != null) {
			setCompanyName(companyName);
		}

		Integer status = (Integer)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public long getParticipantId() {
		return _participantId;
	}

	@Override
	public void setParticipantId(long participantId) {
		_participantId = participantId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public long getEventId() {
		return _eventId;
	}

	@Override
	public void setEventId(long eventId) {
		_columnBitmask |= EVENTID_COLUMN_BITMASK;

		if (!_setOriginalEventId) {
			_setOriginalEventId = true;

			_originalEventId = _eventId;
		}

		_eventId = eventId;
	}

	public long getOriginalEventId() {
		return _originalEventId;
	}

	@Override
	public String getFullName() {
		if (_fullName == null) {
			return StringPool.BLANK;
		}
		else {
			return _fullName;
		}
	}

	@Override
	public void setFullName(String fullName) {
		_columnBitmask = -1L;

		_fullName = fullName;
	}

	@Override
	public String getEmail() {
		if (_email == null) {
			return StringPool.BLANK;
		}
		else {
			return _email;
		}
	}

	@Override
	public void setEmail(String email) {
		_columnBitmask |= EMAIL_COLUMN_BITMASK;

		if (_originalEmail == null) {
			_originalEmail = _email;
		}

		_email = email;
	}

	public String getOriginalEmail() {
		return GetterUtil.getString(_originalEmail);
	}

	@Override
	public String getPhoneNumber() {
		if (_phoneNumber == null) {
			return StringPool.BLANK;
		}
		else {
			return _phoneNumber;
		}
	}

	@Override
	public void setPhoneNumber(String phoneNumber) {
		_phoneNumber = phoneNumber;
	}

	@Override
	public String getCompanyName() {
		if (_companyName == null) {
			return StringPool.BLANK;
		}
		else {
			return _companyName;
		}
	}

	@Override
	public void setCompanyName(String companyName) {
		_companyName = companyName;
	}

	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_status = status;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Participant.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Participant toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Participant)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ParticipantImpl participantImpl = new ParticipantImpl();

		participantImpl.setUuid(getUuid());
		participantImpl.setParticipantId(getParticipantId());
		participantImpl.setCompanyId(getCompanyId());
		participantImpl.setGroupId(getGroupId());
		participantImpl.setEventId(getEventId());
		participantImpl.setFullName(getFullName());
		participantImpl.setEmail(getEmail());
		participantImpl.setPhoneNumber(getPhoneNumber());
		participantImpl.setCompanyName(getCompanyName());
		participantImpl.setStatus(getStatus());

		participantImpl.resetOriginalValues();

		return participantImpl;
	}

	@Override
	public int compareTo(Participant participant) {
		int value = 0;

		value = getFullName().compareToIgnoreCase(participant.getFullName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Participant)) {
			return false;
		}

		Participant participant = (Participant)obj;

		long primaryKey = participant.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ParticipantModelImpl participantModelImpl = this;

		participantModelImpl._originalUuid = participantModelImpl._uuid;

		participantModelImpl._originalCompanyId = participantModelImpl._companyId;

		participantModelImpl._setOriginalCompanyId = false;

		participantModelImpl._originalGroupId = participantModelImpl._groupId;

		participantModelImpl._setOriginalGroupId = false;

		participantModelImpl._originalEventId = participantModelImpl._eventId;

		participantModelImpl._setOriginalEventId = false;

		participantModelImpl._originalEmail = participantModelImpl._email;

		participantModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Participant> toCacheModel() {
		ParticipantCacheModel participantCacheModel = new ParticipantCacheModel();

		participantCacheModel.uuid = getUuid();

		String uuid = participantCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			participantCacheModel.uuid = null;
		}

		participantCacheModel.participantId = getParticipantId();

		participantCacheModel.companyId = getCompanyId();

		participantCacheModel.groupId = getGroupId();

		participantCacheModel.eventId = getEventId();

		participantCacheModel.fullName = getFullName();

		String fullName = participantCacheModel.fullName;

		if ((fullName != null) && (fullName.length() == 0)) {
			participantCacheModel.fullName = null;
		}

		participantCacheModel.email = getEmail();

		String email = participantCacheModel.email;

		if ((email != null) && (email.length() == 0)) {
			participantCacheModel.email = null;
		}

		participantCacheModel.phoneNumber = getPhoneNumber();

		String phoneNumber = participantCacheModel.phoneNumber;

		if ((phoneNumber != null) && (phoneNumber.length() == 0)) {
			participantCacheModel.phoneNumber = null;
		}

		participantCacheModel.companyName = getCompanyName();

		String companyName = participantCacheModel.companyName;

		if ((companyName != null) && (companyName.length() == 0)) {
			participantCacheModel.companyName = null;
		}

		participantCacheModel.status = getStatus();

		return participantCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(21);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", participantId=");
		sb.append(getParticipantId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", eventId=");
		sb.append(getEventId());
		sb.append(", fullName=");
		sb.append(getFullName());
		sb.append(", email=");
		sb.append(getEmail());
		sb.append(", phoneNumber=");
		sb.append(getPhoneNumber());
		sb.append(", companyName=");
		sb.append(getCompanyName());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(34);

		sb.append("<model><model-name>");
		sb.append("com.rivetlogic.event.model.Participant");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>participantId</column-name><column-value><![CDATA[");
		sb.append(getParticipantId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>eventId</column-name><column-value><![CDATA[");
		sb.append(getEventId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fullName</column-name><column-value><![CDATA[");
		sb.append(getFullName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>email</column-name><column-value><![CDATA[");
		sb.append(getEmail());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>phoneNumber</column-name><column-value><![CDATA[");
		sb.append(getPhoneNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyName</column-name><column-value><![CDATA[");
		sb.append(getCompanyName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Participant.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Participant.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _participantId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _eventId;
	private long _originalEventId;
	private boolean _setOriginalEventId;
	private String _fullName;
	private String _email;
	private String _originalEmail;
	private String _phoneNumber;
	private String _companyName;
	private int _status;
	private long _columnBitmask;
	private Participant _escapedModel;
}